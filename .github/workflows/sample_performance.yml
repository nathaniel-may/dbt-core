# **what?**
# This workflow samples performance characteristics of your commit and compares them to
# the most recent release. If they are significanly off from the previously recorded
# distribution it will trigger a failure. Do not rerun these failures to get them to pass.
# There is more information in the performance readme about how to handle failures.
#
# **why?**
# This will help us potentially catch new performance regressions in development before
# releasing a new version.
#
# **whent?**
# This runs on every commit in PRs.
#


name: Performance Regression Tests
# Schedule triggers
on:
  # sampling is fast enough to run on every commit in PRs
  pull_request:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RUNNER_CACHE_PATH: performance/runner/target/release/runner

jobs:
  latest-runner:
    name: Build or Fetch Performance Runner
    runs-on: ubuntu-latest
    env:
      RUSTFLAGS: "-D warnings"
    steps:

      # specifically checksout main so that when we're sampling on commits to
      # patch releases, we're using the latest runner code not whatever is in the working branch.
      #
      # the with clause should be commented out if you're working on the runner
      # and want to see output from your code. it's pulling from main, not what you're
      # working on.
      - name: Checkout
        uses: actions/checkout@v2
        # TODO uncomment when done developing this.
        # with:
        #   ref: main

      # create a cache key that will be used in the next job. without this the
      # next job would have to checkout from main an hash the files itself.
      - name: Create Cache Key
        id: cacheKey
        run: echo "::set-output name=key::${{ runner.os }}-${{ hashFiles('performance/runner/Cargo.toml')}}-${{ hashFiles('performance/runner/src/*') }}"
        working-directory: ${{ env.RUNNER_CACHE_PATH }}

      # attempts to access a previously cached runner
      #
      # unless you're developing the runner, it should be in the cache.
      - uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.RUNNER_CACHE_PATH }}
          key: ${{ steps.cacheKey.outputs.key }}

      - name: Fetch Rust Toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Add fmt
        if: steps.cache.outputs.cache-hit != 'true'
        run: rustup component add rustfmt

      - name: Cargo fmt
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --manifest-path performance/runner/Cargo.toml --all -- --check

      - name: Test
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --manifest-path performance/runner/Cargo.toml

      - name: Build (optimized)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --manifest-path performance/runner/Cargo.toml
      # the cache action automatically caches this binary at the end of the job

  sample:
    # depends on `latest-runner` as a separate job so that failures in this job do not prevent
    # a successfully tested and built binary from being cached. Also so we can checkout dbt
    # from THIS branch not main like we want for the runner.
    needs: [latest-runner]
    name: Compare Performance Samples
    runs-on: ubuntu-latest
    steps:

      # checkout this branch not main
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2.2.2
        with:
          python-version: "3.8"

      - name: Install dbt
        run: pip install -r dev-requirements.txt -r editable-requirements.txt

      - name: Install Hyperfine
        run: wget https://github.com/sharkdp/hyperfine/releases/download/v1.11.0/hyperfine_1.11.0_amd64.deb && sudo dpkg -i hyperfine_1.11.0_amd64.deb

      # this was built in the previous job so it will be there.
      - name: Fetch Runner
        uses: actions/cache@v2
        id: cache
        with:
          path: ${{ env.RUNNER_CACHE_PATH }}
          key: ${{ steps.cacheKey.outputs.key }}

      - name: Move Runner
        run: mv performance/runner/target/release/runner ./performance/app

      - name: Change Runner Permissions
        run: chmod +x ./performance/app

      # `${{ github.workspace }}` is used to pass the absolute path
      - name: Run Measurement
        run: mkdir tmp && ./app sample -b ${{ github.workspace }}/performance/baselines -p ${{ github.workspace }}/performance/projects -o ${{ github.workspace }}/tmp
        working-directory: ${{ github.workspace }}/performance/
